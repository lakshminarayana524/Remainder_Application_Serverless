Open SES service and create a identity 
And select email 
and verify the mail 
 
 
 

Create a Lambda function  
  with run time python 
 
Code: 
import boto3 
import os 
import json 
 
FROM_EMAIL = "set your mail" 
ses = boto3.client('ses') 
 
def lambda_handler(event, context): 
    print("Received Mail:", json.dumps(event)) 
    ses.send_email( 
        Source=FROM_EMAIL, 
        Destination={'ToAddresses': [event['Input']['email']]}, 
        Message={ 
            'Subject': {'Data': 'You are invited'}, 
            'Body': {'Text': {'Data': event['Input']['message']}} 
} 
) 
return "Success!" 
Create a step function 
Code: 
{ 
"Comment": "A description of my state machine", 
"StartAt": "Timer", 
"States": { 
"Timer": { 
"Type": "Wait", 
"SecondsPath": "$.waitSeconds", 
"Next": "Email" 
}, 
"Email": { 
"Type": "Task", 
"Resource": "lambda function arn", 
"Parameters": { 
"FunctionName": "EMAIL_LAMBDA", 
"Payload": { 
"Input.$": "$" 
} 
}, 
"Next": "NextState" 
}, 
"NextState": { 
"Type": "Pass", 
"End": true 
} 
} 
} 
create another lambda function  
run time python 
Code: import boto3 
import json 
SM_ARN = “stepdfunction_Arn” 
sm = boto3.client('stepfunctions') 
def lambda_handler(event, context): 
    print("Received event:", json.dumps(event)) 
     
    # Check if 'body' attribute is present in the event 
    if 'body' not in event: 
        return { 
            "statusCode": 400, 
            "headers": {"Access-Control-Allow-Origin": "*"}, 
            "body": json.dumps({"Status": "Failure", "Reason": "'body' attribute missing in the event"}) 
        } 
     
    try: 
        data = json.loads(event['body']) 
        data['waitSeconds'] = int(data['waitSeconds']) 
         
        checks = [ 
            'waitSeconds' in data, 
            isinstance(data['waitSeconds'], int), 
            'message' in data 
        ] 
         
        if False in checks: 
            response = { 
                "statusCode": 400, 
                "headers": {"Access-Control-Allow-Origin": "*"}, 
                "body": json.dumps({"Status": "Failure", "Reason": "Input failed validation"}) 
            } 
        else: 
            sm.start_execution(stateMachineArn=SM_ARN, input=json.dumps(data)) 
            response = { 
                "statusCode": 200, 
                "headers": {"Access-Control-Allow-Origin": "*"}, 
                "body": json.dumps({"Status": "Success"}) 
            } 
    except Exception as e: 
        response = { 
            "statusCode": 500, 
            "headers": {"Access-Control-Allow-Origin": "*"}, 
            "body": json.dumps({"Status": "Failure", "Reason": str(e)}) 
        } 
     
    return response 
paste and deploy it 
 
 
 
 
 
 
 
 
 
 
Create an S3 bucket 
Give it public access 
Add bucket policy  
Code: { 
"Version": "2012-10-17", 
"Statement": [ 
{ 
"Sid": "PublicRead", 
"Effect": "Allow", 
"Principal": "*", 
"Action": "s3:GetObject", 
"Resource": "arn:aws:s3:::bucketname/*" 
} 
] 
} 
Create an  Api gateway 
 
Create a resource in rest api 
 
 
Create a method post and select lambda 
and below select the lambda function 
Create a index.html page 
And scripts.js code 
Once create upload them in the previous created s3 bucket 
 
 
After successfully uploading go to properties ther u will find and static web hosting link click on 
it 
 
 

This is the result
help me with text to align good i uploading the file in github
ChatGPT
Certainly! Here's a more organized and aligned version of your instructions:

Setting up AWS Services and Configurations:
Open SES Service and Create an Identity:

Select email and verify the mail.
Create a Lambda Function:

Runtime: Python
Code:
python
Copy code
import boto3 
import os 
import json

FROM_EMAIL = "set your mail" 
ses = boto3.client('ses')

def lambda_handler(event, context): 
    print("Received Mail:", json.dumps(event)) 
    ses.send_email( 
        Source=FROM_EMAIL, 
        Destination={'ToAddresses': [event['Input']['email']]}, 
        Message={ 
            'Subject': {'Data': 'You are invited'}, 
            'Body': {'Text': {'Data': event['Input']['message']}}
        } 
    )
    return "Success!"
Create a Step Function:

Code:
json
Copy code
{ 
    "Comment": "A description of my state machine", 
    "StartAt": "Timer", 
    "States": { 
        "Timer": { 
            "Type": "Wait", 
            "SecondsPath": "$.waitSeconds", 
            "Next": "Email" 
        }, 
        "Email": { 
            "Type": "Task", 
            "Resource": "lambda function arn", 
            "Parameters": { 
                "FunctionName": "EMAIL_LAMBDA", 
                "Payload": { 
                    "Input.$": "$" 
                } 
            }, 
            "Next": "NextState" 
        }, 
        "NextState": { 
            "Type": "Pass", 
            "End": true 
        } 
    } 
}
Create Another Lambda Function:

Runtime: Python
Code:
python
Copy code
import boto3 
import json 

SM_ARN = “stepdfunction_Arn” 
sm = boto3.client('stepfunctions')

def lambda_handler(event, context): 
    print("Received event:", json.dumps(event)) 

    if 'body' not in event: 
        return { 
            "statusCode": 400, 
            "headers": {"Access-Control-Allow-Origin": "*"}, 
            "body": json.dumps({"Status": "Failure", "Reason": "'body' attribute missing in the event"}) 
        } 

    try: 
        data = json.loads(event['body']) 
        data['waitSeconds'] = int(data['waitSeconds']) 

        checks = [ 
            'waitSeconds' in data, 
            isinstance(data['waitSeconds'], int), 
            'message' in data 
        ] 

        if False in checks: 
            response = { 
                "statusCode": 400, 
                "headers": {"Access-Control-Allow-Origin": "*"}, 
                "body": json.dumps({"Status": "Failure", "Reason": "Input failed validation"}) 
            } 
        else: 
            sm.start_execution(stateMachineArn=SM_ARN, input=json.dumps(data)) 
            response = { 
                "statusCode": 200, 
                "headers": {"Access-Control-Allow-Origin": "*"}, 
                "body": json.dumps({"Status": "Success"}) 
            } 
    except Exception as e: 
        response = { 
            "statusCode": 500, 
            "headers": {"Access-Control-Allow-Origin": "*"}, 
            "body": json.dumps({"Status": "Failure", "Reason": str(e)}) 
        } 

    return response 
Create an S3 Bucket:

Give it public access.
Add bucket policy.
json
Copy code
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Sid": "PublicRead", 
            "Effect": "Allow", 
            "Principal": "*", 
            "Action": "s3:GetObject", 
            "Resource": "arn:aws:s3:::bucketname/*" 
        } 
    ] 
}
Create an API Gateway:

Create a resource in REST API.
Create a method POST and select Lambda.
Select the Lambda function.
Create an index.html Page:

Create index.html and scripts.js.
Upload them to the S3 bucket.
Static Web Hosting:

Go to S3 bucket properties and find the static web hosting link. Click on it to access the hosted page.